package com.javarush.test.level22.lesson18.big01;

import java.awt.event.KeyEvent;

/**
 *  Класс Tetris - содержит основной функционал игры.
 */
public class Tetris
{

    private Field field;                //Поле с клетками
    private Figure figure;              //Фигурка

    private boolean isGameOver;         //Игра Окончена?

    public Tetris(int width, int height)
    {
        field = new Field(width, height);
        figure = null;
    }

    /**
     * Геттер переменной field.
     */
    public Field getField()
    {
        return field;
    }

    /**
     * Геттер переменной figure.
     */
    public Figure getFigure()
    {
        return figure;
    }

    /**
     *  Основной цикл программы.
     *  Тут происходят все важные действия
     */
    public void run() throws Exception
    {
        //Создаем объект "наблюдатель за клавиатурой" и стартуем его.
        KeyboardObserver keyboardObserver = new KeyboardObserver();
        keyboardObserver.start();

        //выставляем начальное значение переменной "игра окончена" в ЛОЖЬ
        isGameOver = false;
        //создаем первую фигурку посередине сверху: x - половина ширины, y - 0.
        figure = FigureFactory.createRandomFigure(field.getWidth() / 2, 0);

        //пока игра не окончена
        while (!isGameOver)
        {
            //"наблюдатель" содержит события о нажатии клавиш?
            if (keyboardObserver.hasKeyEvents())
            {
                //получить самое первое событие из очереди
                KeyEvent event = keyboardObserver.getEventFromTop();
                //Если равно символу 'q' - выйти из игры.
                if (event.getKeyChar() == 'q') return;
                //Если "стрелка влево" - сдвинуть фигурку влево
                if (event.getKeyCode() == KeyEvent.VK_LEFT)
                    figure.left();
                //Если "стрелка вправо" - сдвинуть фигурку вправо
                else if (event.getKeyCode() ==  KeyEvent.VK_RIGHT)
                    figure.right();
                //Если  код клавишы равен 12 ("цифра 5 на доп. клавиатуре") - повернуть фигурку
                else if (event.getKeyCode() ==  12)
                    figure.rotate();
                //Если "пробел" - фигурка падает вниз на максимум
                else if (event.getKeyCode() ==  KeyEvent.VK_SPACE)
                    figure.downMaximum();
            }

            step();             //делаем очередной шаг
            field.print();      //печатаем состояние "поля"
            Thread.sleep(300);  //пауза 300 миллисекунд - 1/3 секунды
        }

        //Выводим сообщение "Game Over"
        System.out.println("Game Over");
    }

    public void step()
    {
        //опускам фигурку вниз
        figure.down();

        //если разместить фигурку на текущем месте невозможно
        if (!figure.isCurrentPositionAvailable())
        {
            figure.up();                    //поднимаем обратно
            figure.landed();                //приземляем

            isGameOver = figure.getY() <= 1;//если фигурка приземлилась на самом верху - игра окончена

            field.removeFullLines();        //удаляем заполненные линии

            figure = FigureFactory.createRandomFigure(field.getWidth() / 2, 0); //создаем новую фигурку
        }
    }

    /**
     * Сеттер для figure
     */
    public void setFigure(Figure figure)
    {
        this.figure = figure;
    }

    /**
     * Сеттер для field
     */
    public void setField(Field field)
    {
        this.field = field;
    }

    public static Tetris game;
    public static void main(String[] args) throws Exception
    {
        game = new Tetris(10, 20);
        game.run();
    }
}
//
//Задание 17
//        Я тут немножечко подправил код.
//        Но в целом - отлично.
//        Запускаем и наслаждаемся тетрисом.
//        P.S.
//        Не забудь отрегулировать высоту консоли
//        Задание 16
//        Напиши свою реализацию методов left(), right(), up(), down() в классе Figure.
//        Подумай, что должны делать эти методы?
//        Задание 15
//        Напиши реализацию метода step в классе Tetris.
//        В методе надо переместить фигурку вниз на один шаг.
//        Если после перемещения положить фигурку на текущее место невозможно, то:
//        а) поднять ее обратно (up)
//        б) "приземлить" ее (landed)
//        в) удалить все "полные линии" в объекте field
//        г) создать новую фигурку взамен старой.
//        Задание 14
//        Напиши реализацию метода removeFullLines в классе Field
//        Надо
//        а) удалить все строки из матрицы, которые полностью заполнены (состоят из одних единиц)
//        б) сместить оставшиеся строки вниз
//        в) создать новые строки взамен отсутствующих.
//        ВАЖНО!
//        matrix[y][x] содержит элемент с координатами (x,y)
//        matrix[i] содержит i-ю строку
//        а) Мы можем удалить стоку:
//        matrix[i] = null
//        б)Скопировать [ссылку на] строку:
//        matrix[i+1] = matrix[i];
//        в)Создать новую строку:
//        matrix[i] = new int[width];
//        Задание 13
//        Теперь приступим к реализации созданных методов.
//        Напиши реализацию метода print в классе Field
//        а) Метода должен выводить на экран прямоугольник.
//        б) Высота прямоугольника равна height, ширина - width
//        в) Если данная клетка пустая - вывести точку, если не пустая - английский X
//        Подсказка:
//        if (matrix[y][x]==0) ...
//        Задание 12
//        В тетрисе мы управляем движением фигурки с помощью клавиатуры.
//        Тут есть 4 действия:
//        движение влево (кнопка влево)
//        движение вправо (кнопка влево)
//        поворот фигурки (цифра 5 на доп.клавиатуре справа)
//        падение вниз (пробел)
//        Мы будем обрабатывать ввод с клавиатуры в методе run() класса Tetris.
//        И тут у меня для тебя две новости: хорошая и плохая
//        Плохая новость состоит в том, что java не позволяет считать нажатые символы с клавиатуры,
//        пока пользователь не нажмет enter.
//        Не очень удобно, правда?
//        Хорошая новость состоит в том, я написал специальный класс (KeyboardObserver), который позволяет обойти это ограничение.
//        Так что ты можешь воспользоваться им.
//        Есть еще и отличная новость.
//        Ты до сих пор отлично справлялся, поэтому я помогу тебе немного.
//        Я написал за тебя методы:
//        а) createRandomFigure в FigureFactory
//        б) run в Tetris
//        Изучи их внимательно и переходи дальше.
//        Задание 11
//        Теперь создай класс FigureFactory.
//        С его помощью мы будем создавать фигуры различных форм.
//        Пока он будет содержать только один статический метод createRandomFigure:
//public static Figure createRandomFigure(int x,int y)
//        Задание 10
//        Так же нам понадобятся методы для управления фигуркой.
//        Добавь в класс Figure методы:
//        left() - для движения фигурки влево.
//        right() - для движения фигурки вправо.
//        down() - для движения фигурки вниз.
//        up() - для движения фигурки вверх.
//        downMaximum() - падение фигурки в низ до дна.
//        boolean isCurrentPositionAvailable() - проверка - может ли фигурка быть помещена в текущую позицию.
//        landed() - вызывается, когда фигурка достигла дна или уперлась в другую фигурку
//        Все ее занятые клетки теперь должны добавиться в Field.
//        Задание 9
//        Если ты обратил внимание, мы пишем программу "сверху вниз".
//        Сначала решили, какие классы нам нужны. Затем - какие методы.
//        А потом уже начнем писать код этих методов.
//        Таким образом мы разбиваем большую задачу на множество маленьких.
//        Когда код всех методов будет готов, останется только проверить - так ли все работает, как должно быть.
//        И если надо - внести некоторые изменения.
//        Задание 8
//        Теперь создадим костяк класса Figure.
//        Этот класс будет описывают падающую фигурку.
//        Нам понадобятся ее координаты и форма.
//        За координаты будут отвечать две переменные x и y.
//        За форму - матрица. Двумерный массив 3x3, состоящий из единиц и нулей.
//        Единицей мы обозначаем что клетка есть, нулем - что она пустая.
//        Добавь в класс Figure два поля поля: x типа int, y типа int.
//        Еще добавь двумерный массив: matrix(матрица) типа int[][].
//        Там же добавь getter'ы для созданных переменных.
//        Задание 7
//        Нам понадобится еще 4 метда в классе Field:
//        а) print() - объект будет отрисовывать на экран свое текущее состояние;
//        б) removeFullLines() - будет удалять из матрицы полностью заполненные строки и сдвигать вышележащие строки вниз;
//        в) int getValue(int x, int y) - возвращает значение которое находится в матрице с координатами x и y;
//        г) void setValue(int x, int y, int value) - устанавливает переданное значение в ячейку массива (матрицы) с координатами x, y.
//        Задание 6
//        Теперь перейдем к классу Field.
//        Он будет отвечать за хранение данных о текущих занятых и свободных клетках на поле игры.
//        Добавь в класс Field два поля поля: width (ширина) типа int, height(высота) типа int.
//        Так же нам понадобится матрица - двумерный массив: matrix(матрица) типа int[][];
//        Там же добавь getter'ы для созданных переменных.
//        ВАЖНО!
//        Двумерный массив можно представить как массив массивов или как прямоугольную матрицу.
//        При этом первой координатой в массиве у нас будет номер строки, а второй - столбца.
//        Другими словами ячейка с координатами x, y - это matrix[y][x].
//        Задание 5
//        Теперь нужно создать объект самого Тетриса.
//        Добавь в класс Tetris статическую переменную game. (тип - Tetris, видимость - public)
//        Затем в методе main создай объект типа Тетрис и сохрани его в эту переменную.
//        Затем добавь вызов метода run.
//        Должно получиться что-то типа такого:
//        game = new Tetris();
//        game.run();
//        Задание 4
//        Так же еще нам понадобится пара методов.
//        Добавь в класс Tetris методы run() и step():
//        run() будет отвечать за всю игру.
//        А step() - за один шаг в игре.
//        Задание 3
//        Отлично! Теперь добавь в Tetris две переменные: filed типа Field и figure типа Figure.
//        С их помощью мы будем хранить информацию о текущей фигурке и о состоянии дел на "поле клеток".
//        Так же добавь getter'ы для созданных переменных.
//        Задание 2
//        А еще нам понадобится метод main. Как же без него.
//        Добавь метод main в класс Tetris
//        Задание 1
//        Давай напишем игру Тетрис.
//        Наш Тетрис будет состоять из двух вещей: поля из клеток и фигурки, которая падает.
//        Поэтому для начала создай три класса: Field(поле с клетками), Figure(фигура) и сам Tetris.
